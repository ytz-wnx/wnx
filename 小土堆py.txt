import torch.optim
import torchvision
from torch import nn
from torch.utils.data import DataLoader
train_data = torchvision.datasets.CIFAR10(root="../data", train=True, transform=torchvision.transforms.ToTensor(),
                                          download=True)
text_data = torchvision.datasets.CIFAR10(root="../data", train=False, transform=torchvision.transforms.ToTensor(),
                                         download=True)
train_dataloader = DataLoader(dataset=train_data, batch_size=64)
text_dataloader = DataLoader(dataset=text_data, batch_size=64)


class Mynn(nn.Module):
    def __init__(self):
        super(Mynn, self).__init__()
        self.module = nn.Sequential(
            nn.Conv2d(3, 32, 5, 1, 2),
            nn.MaxPool2d(2),
            nn.Conv2d(32, 32, 5, 1, 2),
            nn.MaxPool2d(2),
            nn.Conv2d(32, 64, 5, 1, 2),
            nn.MaxPool2d(2),
            nn.Flatten(),
            nn.Linear(64 * 4 * 4, 64),
            nn.Linear(64, 10)
        )

    def forward(self, x):
        x = self.module(x)
        return x


mynn = Mynn()
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(mynn.parameters(), lr=0.01)
total_train = 0
total_text = 0
epoch = 3
for i in range(epoch):
    print("-----第", (i+1), "轮训练开始------")
    for data in train_dataloader:
        iMgs, targets = data
        out_puts = mynn(iMgs)
        loss = loss_fn(out_puts, targets)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        total_train += 1
        if total_train % 100 == 0:
            print("训练次数：", total_train, "loss:", loss.item())


total_loss = 0
with torch.no_grad():
    for data in text_dataloader:
        iMgs, targets = data
        outputs = mynn(iMgs)
        loss = loss_fn(outputs, targets)
        total_loss += loss.item()
print("整体误差为:", total_loss)